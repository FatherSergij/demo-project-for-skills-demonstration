---
- name: Deploy web page(run in master)
  block:
  - name: Copy files to master from localhost to deploy web page
    copy:
      src: web
      dest: $HOME

  - name: Generate values.yaml
    template: 
      src: values.j2
      dest: $HOME/web/helm_chart/helm/templates/values.yaml

  - name: Copy AWS credentials to master
    copy:
      src: .aws/
      dest: ~/.aws/

  - name: Install AWS CLI
    become: true
    shell: apt install -y awscli

  - name: To log in to an Amazon ECR registry
    shell: aws ecr get-login-password --region {{ region_from_terraform }} | podman login --username AWS \
            --password-stdin {{ aws_user_id_from_terraform }}.dkr.ecr.{{ region_from_terraform }}.amazonaws.com
    
  #- name: Install Ingress-Nginx Controller
  #  shell: |
  #    helm upgrade --install ingress-nginx ingress-nginx \
  #     --repo https://kubernetes.github.io/ingress-nginx \
  #     --namespace ingress-nginx --create-namespace
#       --set controller.service.externalTrafficPolicy=Local --set controller.config.use-proxy-protocol=true 

  - name: Build image
    shell: podman build web/nginx_phpfpm/src/ -t {{ aws_user_id_from_terraform }}.dkr.ecr.{{ region_from_terraform }}.amazonaws.com/my_image

  - name: Push image
    shell: podman push {{ aws_user_id_from_terraform }}.dkr.ecr.{{ region_from_terraform }}.amazonaws.com/my_image 

  - name: Delete secret key for pull image(if it exist)
    shell: kubectl delete secret regcred --ignore-not-found

  - name: Create secret for pull image
    shell: |
      kubectl create secret docker-registry regcred --docker-username=AWS \
        --docker-server={{ aws_user_id_from_terraform }}.dkr.ecr.{{ region_from_terraform }}.amazonaws.com \
        --docker-password=$(aws ecr get-login-password --region {{ region_from_terraform }})

  - name: Need restart CoreDNS for correct work(from pods not work 'curl name_service(example- curl kubernetes.defaults)')
    shell: kubectl rollout restart deploy coredns -n kube-system

  - name: Install Cert-manager
    become: false
    shell: |
      helm repo add jetstack https://charts.jetstack.io
      helm repo update
      helm upgrade --install cert-manager jetstack/cert-manager \
        --namespace cert-manager --create-namespace --version v1.13.1 \
        --set installCRDs=true 
    #  --set webhook.hostNetwork=true --set webhook.securePort=10260
    ignore_errors: true    
    #shell: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml  

  - name: Install Ingress-Nginx Controller
    shell: |
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/aws/deploy.yaml
      kubectl patch deploy ingress-nginx-controller -n ingress-nginx -p '{"spec": {"template": {"spec":{"hostNetwork": true}}}}'
    #  wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml

  - name: Run deploy and service
    shell: |
      cd web/helm_chart/helm/
      helm upgrade --install -n my-project --create-namespace test

  #- name: Run deploy and service
  #  shell: |
  #    cd web/helm_chart/helm/templates
  #    kubectl apply -f issuer1.yaml
  #    kubectl apply -f deploy-nginx1.yaml
  #    kubectl apply -f service-nginx1.yaml
  #    while ! kubectl apply -f ingress1.yaml; do sleep 5; done 
    #will run until success(while Ingress-Nginx Controller will run)

  - name: Check update DNS Records
    shell: while ! nslookup nginx.{{ domain_from_terraform }}; do sleep 5; done
    register: rc_check

  - name: Otput message that all ok))
    debug:
      msg: "That's OK. Let's go nginx.{{ domain_from_terraform }}"
    when: rc_check.rc == 0
  become: false
  #if run with become: true(in ansible.cfg) then %HOME will be /root and all run will be as root  
  when: "'ansible_master' in group_names"       