---
- name: Run in master
  block:
  - name: Check init cluster k8s
    #if run with become: yes then command is going as root and will be error
    become: false   
    shell: kubectl cluster-info
    register: rc_k8s
    ignore_errors: true

  - name: Init k8s if cluster not init
    block:
    - name: Initialization cluster k8s on master and extract 2 last line for join workers
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/crio/crio.sock | tail -2
      register: result
    
    - name: Create config for kubelet
      #if run with become: true(in ansible.cfg) then %HOME will be /root
      become: false
      shell: |
        mkdir -p $HOME/.kube
        sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Print output to file for run one in workers
      copy:
        content: "{{ result.stdout }}"
        dest: "{{ role_path }}/files/join_for_workers.sh" #role_path - system variable
        mode: '0775'
      delegate_to: localhost        
    when: rc_k8s.rc == 1

  - name: Create token k8s if cluster init already
    block:
    - name: Create token for workers
      shell: kubeadm token create --print-join-command
      register: result

    - name: Print output to file for run one in workers
      copy:
        content: "{{ result.stdout }}"
        dest: "{{ role_path }}/files/join_for_workers.sh" #role_path - system variable
        mode: '0775'
      delegate_to: localhost            
    when: rc_k8s.rc == 0

  - name: Copy config from master to localhost for workers
    become: false
    fetch:
      src: $HOME/.kube/config
      dest: "{{ role_path }}/files/config"
      flat: yes

  - name: Install podman
    shell: |
      apt-get update && sudo apt-get -y upgrade
      apt-get -y install podman
    ignore_errors: true

  - name: Install Helm (sudo apt-get install apt-transport-https - not run because it ran in install.yml)
    shell: |
      curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
      apt-get update
      apt-get -y install helm  

  - name: Install Calico
    become: false
    shell: |
      helm repo add projectcalico https://docs.tigera.io/calico/charts
      helm repo update
      helm upgrade --install calico projectcalico/tigera-operator --version v3.26.1 --namespace tigera-operator --create-namespace 

  #- name: downgrade helm
  #  shell: |
  #    rm /usr/local/bin/helm
  #    curl -fsSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /tmp/helm.sh
  #    chmod +x /tmp/helm.sh
  #    /tmp/helm.sh --version v3.12.3
  #    helm version    
#
  #- name: Install Nginx-Ingress
  #  become: false
  #  shell: helm upgrade --install nginx-ingress oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.0.0        

  - name: Install Ingress-Nginx Controller_1
    become: false
    shell: |
      wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
      kubectl apply -f deploy.yaml
#
  #- name: Install Ingress-Nginx Controller_2
  #  blockinfile:
  #    path: deploy.yaml
  #    block: --validating-webhook=0.0.0.0:8443

#  - name: Install Ingress-Nginx Controller
#    become: false
#    shell: |
#      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml           
#      helm upgrade --install ingress-nginx ingress-nginx \
#       --repo https://kubernetes.github.io/ingress-nginx \
#       --namespace ingress-nginx --create-namespace \
#       --set controller.service.externalTrafficPolicy=Local --set controller.config.use-proxy-protocol=true

  #- name: Install Cert-manager
  #  become: false
  #  shell: |
  #    helm repo add jetstack https://charts.jetstack.io
  #    helm repo update
  #    helm upgrade --install cert-manager jetstack/cert-manager \
  #      --namespace cert-manager --create-namespace --version v1.13.1 \
  #      --set installCRDs=true --set webhook.hostNetwork=true --set webhook.securePort=10260
  #  ignore_errors: true    
    #shell: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml  
  when: "'ansible_master' in group_names"         
